#!/bin/bash

set -e

dockerCmd="docker compose"
if (( $# == 2 )); then
    dockerCmd="docker-compose"
fi

if (( $# < 1 )); then
    echo "Illegal number of parameters"
    echo "usage: services [create|start|stop]"
    exit 1
fi

loadData () {
	waitForMongo
	addDatabaseIndex
	waitForOrion
	docker run --rm -v $(pwd)/import-entities:/home/curl_user/import-entities \
		--network fiware_default \
		-e ORION_PORT="${ORION_PORT}" \
		--entrypoint /bin/ash curlimages/curl import-entities
	waitForIoTAgent
	docker run --rm -v $(pwd)/provision-services:/home/curl_user/provision-services \
		--network fiware_default \
		-e ORION_PORT="${ORION_PORT}" \
		-e IOTA_NORTH_PORT="${IOTA_NORTH_PORT}" \
		--entrypoint /bin/ash curlimages/curl provision-services
	docker run --rm -v $(pwd)/provision-devices:/home/curl_user/provision-devices \
		--network fiware_default \
		-e ORION_PORT="${ORION_PORT}" \
		-e IOTA_NORTH_PORT="${IOTA_NORTH_PORT}" \
		--entrypoint /bin/ash curlimages/curl provision-devices
	docker run --rm -v $(pwd)/subscription-entities:/home/curl_user/subscription-entities \
		--network fiware_default \
		-e ORION_PORT="${ORION_PORT}" \
		-e QUANTUMLEAP_PORT="${QUANTUMLEAP_PORT}" \
		--entrypoint /bin/ash curlimages/curl subscription-entities
	echo ""
}

stoppingContainers () {
	#CONTAINERS=$(docker ps --filter "label=org.fiware=tutorial" -aq)
	CONTAINERS=$(docker ps -aq)
	if [[ -n $CONTAINERS ]]; then 
		echo "Stopping containers"
		docker rm -f $CONTAINERS || true
	fi
	VOLUMES=$(docker volume ls -qf dangling=true) 
	if [[ -n $VOLUMES ]]; then 
		echo "Removing old volumes"
		docker volume rm $VOLUMES || true
	fi
	#NETWORKS=$(docker network ls  --filter "label=org.fiware=tutorial" -q) 
		NETWORKS=$(docker network ls -q) 
		if [[ -n $NETWORKS ]]; then 
			echo "Removing tutorial networks"
			docker network rm $NETWORKS || true
		fi

	docker rmi -f fiware-publisher-agent
	docker rmi -f fiware-synthetic-data-generator-file
	docker rmi -f fiware-api-crate
}

displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name=fiware-*
	(gp ports list 2> /dev/null) || true 
	echo ""
}

addDatabaseIndex () {
	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mOrion\033[0m  ..."
	docker exec  mongo-db mongo --eval '
	conn = new Mongo();db.createCollection("orion");
	db = conn.getDB("orion");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1}); 
	db.entities.createIndex({"_id.id": 1});' > /dev/null

	docker exec  mongo-db mongo --eval '
	conn = new Mongo();db.createCollection("orion-openiot");
	db = conn.getDB("orion-openiot");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1}); 
	db.entities.createIndex({"_id.id": 1});' > /dev/null
	echo -e " \033[1;32mdone\033[0m"

	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mIoT-Agent\033[0m  ..."
	docker exec  mongo-db mongo --eval '
	conn = new Mongo();
	db = conn.getDB("iotagent-json");
	db.createCollection("devices");
	db.devices.createIndex({"_id.service": 1, "_id.id": 1, "_id.type": 1});
	db.devices.createIndex({"_id.type": 1}); 
	db.devices.createIndex({"_id.id": 1});
	db.createCollection("groups");
	db.groups.createIndex({"_id.resource": 1, "_id.apikey": 1, "_id.service": 1});
	db.groups.createIndex({"_id.type": 1});' > /dev/null
	echo -e " \033[1;32mdone\033[0m"
}

waitForMongo () {
	echo -e "\n⏳ Waiting for \033[1;34mMongoDB\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' mongo-db` == "healthy" ]
	do 
		sleep 1
	done
}

waitForOrion () {
	echo -e "\n⏳ Waiting for \033[1;34mOrion\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' orion` == "healthy" ]
	do
	  echo -e "Context Broker HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:1026/version'` " (waiting for 200)"
	  sleep 1
	done
}

waitForIoTAgent () {
	echo -e "\n⏳ Waiting for \033[1;34mIoT-Agent\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' iotagent-json` == "healthy" ]
	do 
	  echo -e "IoT Agent HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:4041/version'` " (waiting for 200)"
	  sleep 1
	done
}

wait () {
	echo -e "\n⏳ Waiting for 7 seconds\n"
	sleep 7
}

updateServices () {
	# Install swagger service
	INTERFACE=$(ip route | grep default | awk '{print $5}')
	HOST=$(ip addr show "$INTERFACE" | grep -oP 'inet \K[\d.]+')

	URL_1="http://api-crate:8080"
	NEW_URL_1="https://$HOST:4430"
	YAML_FILE="../swagger/swagger.json"

	sed -i "s|$URL_1|$NEW_URL_1|g" "$YAML_FILE"
}

removeCert () {
	rm -rf certs/
	rm -rf ../nginx/certs/

	sudo rm -rf /usr/local/share/ca-certificates/api.crt
	sudo rm -rf /usr/local/share/ca-certificates/rootCA.crt
	sudo update-ca-certificates

	# Install swagger service
	INTERFACE=$(ip route | grep default | awk '{print $5}')
	HOST=$(ip addr show "$INTERFACE" | grep -oP 'inet \K[\d.]+')
	
	NEW_URL_1="http://api-crate:8080"
	URL_1="https://$HOST:4430"
	YAML_FILE="../swagger/swagger.json"

	sed -i "s|$URL_1|$NEW_URL_1|g" "$YAML_FILE"
}

command="$1"
case "${command}" in
	"help")
        echo "usage: services [create|start|stop]"
        ;;
	"create")
		export $(cat ../.env | grep "#" -v)
		echo "Pulling Docker images"
		docker pull curlimages/curl
		${dockerCmd} pull
		updateServices
		;;
	 "start")
		export $(cat ../.env | grep "#" -v)
		stoppingContainers
		echo -e "Starting containers: \033[1;34mOrion\033[0m, \033[1;34mQuantumLeap\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1mTutorial\033[0m, a \033[1mGrafana\033[0m metrics dashboard, \033[1mCrateDB\033[0m and \033[1mMongoDB\033[0m databases and a \033[1mRedis\033[0m cache."
		echo -e "- \033[1;34mOrion\033[0m is the context broker"
		echo -e "- \033[1;34mQuantumLeap\033[0m will write to CrateDB"
		echo -e "- \033[1mGrafana\033[0m will read from CrateDB"
		echo -e "- \033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		echo -e "- \033[1mTutorial\033[0m acts as a series of dummy IoT Sensors over MQTT"
		echo ""
		${dockerCmd} up -d mongo-db mongo-express orion mosquitto iotagent-json crate-db quantumleap api-crate swagger nginx
		loadData
		displayServices
		${dockerCmd} up -d publisher-agent synthetic-data-generator-file
		echo -e "Now open \033[4mhttp://localhost:3000/device/monitor\033[0m"
		;;
	"stop")
		export $(cat ../.env | grep "#" -v)
		stoppingContainers
		removeCert
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|start|stop]"
		exit 127;
		;;
esac